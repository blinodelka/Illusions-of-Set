data {
int<lower = 1> n;
int<lower = 0> Y;
}
parameters {
real<lower = 0, upper = 1> p;
}
model {
p ~ beta(1, 1);
Y ~ binomial(n, p);
}
'
stanmodelH1 <- stan_model(model_code = model, model_name = 'H1')
fit_H0 <- sampling(stanmodelH1, data_1)
H0 <-
'
data {
int<lower = 1> nY;
vector[nY] Y;
}
parameters {
}
model{
target += binomial_lpdf(Y | 10, 0.5);
}
'
H1 <-
'
data {
int<lower = 1> n;
int<lower = 0> Y;
}
parameters {
real<lower = 0, upper = 1> p;
}
model {
p ~ beta(1, 1);
Y ~ binomial(n, p);
}
'
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 0.5, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real mu;
real<lower = 0> sigma;
}
model {
target += uniform_lpdf(mu | 0,1)
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 0.5,sigma);
}
'
stanmodelH0 <- stan_model(model_code = H0, model_name = 'H0')
stanmodelH0 <- stan_model(model_code = H0, model_name = 'H0')
stanmodelH1 <- stan_model(model_code = model, model_name = 'H1')
N <- 500
true_mu <- 90
# true_sigma <- 125
test_scores <- rnorm(N, true_mu, 15)
data_1 <- list(N = length(test_scores), X = test_scores)
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 100, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real mu;
real<lower = 0> sigma;
}
model {
target += uniform_lpdf(mu | 0,200)
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | mu, sigma);
}
'
stanmodelH0 <- stan_model(model_code = H0, model_name = 'H0')
stanmodelH1 <- stan_model(model_code = model, model_name = 'H1')
fit_H0 <- sampling(model_code = H0, data = data_1)
N <- 500
true_mu <- 90
# true_sigma <- 125
test_scores <- rnorm(N, true_mu, 15)
data_1 <- list(N = length(test_scores), X = test_scores)
fit_H0 <- sampling(stanmodelH0, data_1)
fit_H0 <- sampling(stanmodelH1, data_1)
stanmodelH1 <- stan_model(model_code = H1, model_name = 'H1')
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 100, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real mu;
real<lower = 0> sigma;
}
model {
target += normal_lpdf(mu | 0,200)
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | mu, sigma);
}
'
stanmodelH1 <- stan_model(model_code = H1, model_name = 'H1')
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 100, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real mu<lower = 0, upper = 200>;
real<lower = 0> sigma;
}
model {
target += uniform_lpdf(mu | 0, 200)
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | mu, sigma);
}
'
stanmodelH0 <- stan_model(model_code = H0, model_name = 'H0')
stanmodelH1 <- stan_model(model_code = H1, model_name = 'H1')
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 100, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real mu<lower = 0, upper = 200>;
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(mu | 0,15)
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | mu, sigma);
}
'
stanmodelH1 <- stan_model(model_code = H1, model_name = 'H1')
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 100, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real mu<lower = 0, upper = 200>;
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(mu | 0,15);
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | mu, sigma);
}
'
stanmodelH1 <- stan_model(model_code = H1, model_name = 'H1')
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 100, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0, upper = 200> mu;
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(mu | 0,15);
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | mu, sigma);
}
'
stanmodelH1 <- stan_model(model_code = H1, model_name = 'H1')
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 100, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0, upper = 200> mu;
real<lower = 0> sigma;
}
model {
target += uniform_lpdf(mu | 0,15);
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | mu, sigma);
}
'
stanmodelH0 <- stan_model(model_code = H0, model_name = 'H0')
stanmodelH1 <- stan_model(model_code = H1, model_name = 'H1')
fit_H0 <- sampling(stanmodelH0, data_1)
fit_H0 <- sampling(stanmodelH1, data_1)
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 100, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0, upper = 200> mu;
real<lower = 0> sigma;
}
model {
target += uniform_lpdf(mu | 0,200);
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | mu, sigma);
}
'
stanmodelH0 <- stan_model(model_code = H0, model_name = 'H0')
stanmodelH1 <- stan_model(model_code = H1, model_name = 'H1')
fit_H0 <- sampling(stanmodelH0, data_1)
fit_H0 <- sampling(stanmodelH1, data_1)
fit_H0 <- sampling(stanmodelH0, data_1)
fit_H1 <- sampling(stanmodelH1, data_1)
fit_H0 <- sampling(stanmodelH0, data_1, iter = 20000, warmup = 1000)
fit_H1 <- sampling(stanmodelH1, data_1, iter = 20000, warmup = 1000)
H0_res <- bridge_sampler(stanfitH0, silent = TRUE)
library(rstan)
library(ggmcmc)
library(bayesplot)
library(bridgesampling)
H0_res <- bridge_sampler(stanfitH0, silent = TRUE)
help("bridge_sampler")
H0_res <- bridge_sampler(stanfitH0, silent = TRUE)
H0_res <- bridge_sampler(fit_H0, silent = TRUE)
H0_res <- bridge_sampler(fit_H0, silent = TRUE)
H1_res <- bridge_sampler(fit_H1, silent = TRUE)
print(H0)
print(H0_res)
print(H1_res)
print(H0_res)
print(H1_res)
H0.error <- error_measures(H0_res)$percentage
H1.error <- error_measures(H1_res)$percentage
error_measures(H0_res)$percentage
error_measures(H1_res)$percentage
BF10 <- bf(H1_res, H0_res)
print(BF10)
N <- 50
true_mu <- 90
# true_sigma <- 125
test_scores <- rnorm(N, true_mu, 15)
data_1 <- list(N = length(test_scores), X = test_scores)
H0 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0> sigma;
}
model {
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | 100, sigma);
}
'
H1 <-
'
data {
int<lower = 0> N;  // sample size
vector[N] X;
}
parameters {
real<lower = 0, upper = 200> mu;
real<lower = 0> sigma;
}
model {
target += uniform_lpdf(mu | 0,200);
target += cauchy_lpdf(sigma | 0,15);
target += normal_lpdf(X | mu, sigma);
}
'
fit_H0 <- sampling(stanmodelH0, data_1, iter = 20000, warmup = 1000)
fit_H1 <- sampling(stanmodelH1, data_1, iter = 20000, warmup = 1000)
H0_res <- bridge_sampler(fit_H0, silent = TRUE)
H0_res <- bridge_sampler(fit_H0, silent = TRUE)
H1_res <- bridge_sampler(fit_H1, silent = TRUE)
H0_res
H1_res
error_measures(H0_res)$percentage
error_measures(H1_res)$percentage
BF10 <- bf(H1_res, H0_res)
print(BF10)
set.seed(100)
N <- 50
true_mu <- 100
# true_sigma <- 125
test_scores <- rnorm(N, true_mu, 15)
data_2 <- list(N = length(test_scores), X = test_scores)
fit_H0 <- sampling(stanmodelH0, data_2, iter = 20000, warmup = 1000)
fit_H1 <- sampling(stanmodelH1, data_2, iter = 20000, warmup = 1000)
# считаем логарифм правдоподобия имеющихся данных для каждой из гипотез (моделей)
H0_res <- bridge_sampler(fit_H0, silent = TRUE)
H1_res <- bridge_sampler(fit_H1, silent = TRUE)
H0_res
H1_res
H0_res
H1_res
H0_res
H1_res
# считаем Байес-фактор (в пользу альтернативной гипотезы)
BF10 <- bf(H1_res, H0_res)
print(BF10)
# считаем Байес-фактор (в пользу нулевой гипотезы)
BF01 <- bf(H0_res, H1_res)
print(BF01)
load("data_for_stan.Rdata")
setwd("Documents")
setwd("Documents/Projects/Illusions_of_set/Set 1/Cognitive Modeling/Bayesian")
> setwd("Documents/Projects/")
setwd("Documents/Projects/")
setwd("Documents/Projects")
cd
cd()
getwd()
setwd("Documents/Projects")
setwd("Projects")
setwd("Illusions_of_set/Set 1/Cognitive Modeling/Bayesian")
load("data_for_stan.Rdata")
load("data_for_stan.RData")
data_for_stan$answer.keys <- 1 - data_for_stan$answer.keys
fit_1 <- stan("stan_model_1.stan", data = data_for_stan)
library(rstan)
library(ggmcmc)
library(bayesplot)
fit_1 <- stan("stan_model_1.stan", data = data_for_stan)
fit_1 <- stan("stan_model_1.stan", data = data_for_stan)
fit_1 <- stan("stan_model_1.stan", data = data_for_stan)
fit_1 <- stan("stan_model_1.stan", data = data_for_stan)
fit_1 <- stan("stan_model_1.stan", data = data_for_stan)
fit_1 <- stan("stan_model_1.stan", data = data_for_stan)
load("data_for_stan.RData")
# change to 1 - contrastive, 0 - assimilative
data_for_stan$answer.keys <- 1 - data_for_stan$answer.keys
list_for_stan <- list(nY = nrow(data_for_stan), nS = max(data_for_stan$participant), Subj = data_for_stan$participant, size_diff = data_for_stan$size, num_of_trials = data_for_stan$number_of_fixational_trials, Y = data_for_stan$answer.keys)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan)
load("data_for_stan.RData")
list_for_stan <- list(nY = nrow(data_for_stan), nS = max(data_for_stan$participant), Subj = data_for_stan$participant, size_diff = data_for_stan$size, num_of_trials = data_for_stan$number_of_fixational_trials, Y = data_for_stan$answer.keys)
fit_1 <- stan("bayes_model_1.stan", data = list_for_stan, iter = 6000, warmup = 2000)
load("data_for_stan.RData")
# change to 1 - contrastive, 0 - assimilative
# data_for_stan$answer.keys <- 1 - data_for_stan$answer.keys
list_for_stan <- list(nY = nrow(data_for_stan), nS = max(data_for_stan$participant), Subj = data_for_stan$participant, size_diff = data_for_stan$size, num_of_trials = data_for_stan$number_of_fixational_trials, Y = data_for_stan$answer.keys)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan)
print(fit_1)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan, iter = 6000, warmup = 2000)
print(fit_1)
print(fit_1)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan, iter = 6000, warmup = 2000)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan, iter = 6000, warmup = 2000)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan, iter = 6000, warmup = 2000)
fit_1 <- stan("stan_model_1.stan", data = list_for_stan, iter = 6000, warmup = 2000)
print(fit_1)
stan_model_cog <- stan_model("stan_model_1.stan", model_name = 'cog1')
fit_cog <- sampling(stan_model_cog, list_for_stan, iter = 20000, warmup = 2000)
cog_l <- H0_res <- bridge_sampler(fit_cog, silent = TRUE)
library(bridgesampling)
cog_l <- H0_res <- bridge_sampler(fit_cog, silent = TRUE)
print(cog_l)
# компилируем модели, соответствующие двум гипотезам
stanmodelH0 <- stan_model('H0_1.stan', model_name = 'H0')
stanmodelH1 <- stan_model('H1_1.stan', model_name = 'H1')
# сэмплируем "предсказания" каждой из гипотез (моделей), нужно сгенерировать очень много
fit_H0 <- sampling(stanmodelH0, list_for_stan, iter = 20000, warmup = 1000)
fit_H1 <- sampling(stanmodelH1, list_for_stan, iter = 20000, warmup = 1000)
print(fit_H0)
print(fit_H1)
# считаем логарифм правдоподобия имеющихся данных для каждой из гипотез (моделей)
H0_res <- bridge_sampler(fit_H0, silent = TRUE)
H1_res <- bridge_sampler(fit_H1, silent = TRUE)
print(H0_res)
print(H1_res)
print(H0_res)
print(H1_res)
